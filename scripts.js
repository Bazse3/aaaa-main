const openWeatherApiKey = "ed03c60b237355c3fb689a8a4a2706ee";

const weatherDiv = document.getElementById("weather");
const cityInput = document.getElementById("cityInput");
const searchBtn = document.getElementById("searchBtn");
const locationNameEl = document.getElementById("locationName");
const dateSelector = document.getElementById("dateSelector");
const szottyadasSzintEl = document.getElementById("szottyadasSzint");

let weatherDataGlobal = null;  // Glob√°lis id≈ëj√°r√°sadatok t√°rol√°sa
let selectedDate = null;        // Kiv√°lasztott d√°tum (YYYY-MM-DD)

// V√ÅROS KERES√âS GOMB √âS ENTER ESEM√âNYKEZEL≈êK
searchBtn.addEventListener("click", () => {
  const city = cityInput.value.trim();
  if (city) getWeatherByCity(city);
});
cityInput.addEventListener("keydown", (e) => {
  if (e.key === "Enter") {
    const city = cityInput.value.trim();
    if (city) getWeatherByCity(city);
  }
});

// AUTOMATIKUS HELYMEGHAT√ÅROZ√ÅS OLDAL BET√ñLT√âSKOR
window.onload = () => {
  if ("geolocation" in navigator) {
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        const { latitude, longitude } = pos.coords;
        getWeatherByCoords(latitude, longitude);
      },
      (error) => {
        console.warn("Helymeghat√°roz√°si hiba:", error.message);
        locationNameEl.textContent = "V√°ros: -- (helyadat nem el√©rhet≈ë)";
      },
      { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
    );
  } else {
    locationNameEl.textContent = "A b√∂ng√©sz≈ë nem t√°mogatja a helymeghat√°roz√°st.";
  }
};

// V√ÅROS KOORDIN√ÅT√ÅINAK LEK√âR√âSE N√âV ALAPJ√ÅN
async function getWeatherByCity(city) {
  weatherDiv.textContent = "‚è≥ Bet√∂lt√©s...";
  locationNameEl.textContent = "V√°ros: ...";
  dateSelector.innerHTML = "";

  try {
    const geoRes = await fetch(
      `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${openWeatherApiKey}`
    );
    const geoData = await geoRes.json();

    if (!geoData.length) {
      weatherDiv.textContent = "‚ùå Nem tal√°lhat√≥ a v√°ros!";
      locationNameEl.textContent = "V√°ros: --";
      return;
    }

    const { lat, lon, name } = geoData[0];
    cityInput.value = name;
    getWeatherByCoords(lat, lon, name);
  } catch (e) {
    console.error(e);
    weatherDiv.textContent = "‚ùå Hiba t√∂rt√©nt az adatok lek√©r√©sekor.";
    locationNameEl.textContent = "V√°ros: --";
  }
}

// ID≈êJ√ÅR√ÅS LEK√âR√âSE KOORDIN√ÅT√ÅK ALAPJ√ÅN
async function getWeatherByCoords(lat, lon, cityName = null) {
  weatherDiv.textContent = "‚è≥ Bet√∂lt√©s...";
  locationNameEl.textContent = cityName
    ? `V√°ros: ${cityName}`
    : `V√°ros: ${lat.toFixed(2)}, ${lon.toFixed(2)}`;
  dateSelector.innerHTML = "";

  try {
    const weatherRes = await fetch(
      `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&exclude=minutely,daily,alerts&units=metric&lang=hu&appid=${openWeatherApiKey}`
    );
    const weatherData = await weatherRes.json();

    weatherDataGlobal = weatherData;
    createDateButtons();

    // Alap√©rtelmezett a mai nap legyen kiv√°lasztva
    const todayStr = new Date().toISOString().split("T")[0];
    selectDate(todayStr);
  } catch (e) {
    console.error(e);
    weatherDiv.textContent = "‚ùå Hiba t√∂rt√©nt az id≈ëj√°r√°s lek√©r√©sekor.";
  }
}

// D√ÅTUM V√ÅLASZT√ì GOMBOK L√âTREHOZ√ÅSA (3 NAP: MA, HOLNAP, HOLNAPUT√ÅN)
function createDateButtons() {
  dateSelector.innerHTML = "";
  const now = new Date();

  for (let i = 0; i < 3; i++) {
    const d = new Date(now.getFullYear(), now.getMonth(), now.getDate() + i);
    const isoDate = d.toISOString().split("T")[0];
    const displayDate = ("0" + (d.getMonth() + 1)).slice(-2) + "." + ("0" + d.getDate()).slice(-2);

    const btn = document.createElement("button");
    btn.textContent = displayDate;
    btn.classList.add("date-button");
    btn.dataset.date = isoDate;

    btn.addEventListener("click", () => selectDate(isoDate));

    dateSelector.appendChild(btn);
  }
}

// ADOTT NAP ID≈êJ√ÅR√ÅS√ÅNAK MEGJELEN√çT√âSE
function renderWeatherForDate(dateStr) {
  if (!weatherDataGlobal) return;

  // Kisz≈±rj√ºk a kiv√°lasztott nap √≥r√°it
  const hoursForDay = weatherDataGlobal.hourly.filter((h) => {
    const dt = new Date(h.dt * 1000);
    const y = dt.getFullYear();
    const m = String(dt.getMonth() + 1).padStart(2, "0");
    const d = String(dt.getDate()).padStart(2, "0");
    const localDate = `${y}-${m}-${d}`;
    return localDate === dateStr;
  });

  if (hoursForDay.length === 0) {
    weatherDiv.innerHTML = "<p>Nem el√©rhet≈ë adat erre a napra.</p>";
    return;
  }

  // H≈ëm√©rs√©kleti statisztik√°k
  const temps = hoursForDay.map(h => h.temp);
  const avgTemp = (temps.reduce((a,b) => a + b, 0) / temps.length).toFixed(1);
  const maxTemp = Math.max(...temps).toFixed(1);
  const minTemp = Math.min(...temps).toFixed(1);

  // Szottyad√°s m√©rce friss√≠t√©se
  frissitsSzottyadasMerce(parseFloat(avgTemp));

  const now = new Date();
  const currentHour = now.getHours();
  const currentDateStr = now.toISOString().split("T")[0];

  weatherDiv.innerHTML = `
    <h2>${dateStr === currentDateStr ? "Mai nap" : dateStr}</h2>
    <p><strong>√Åtlag: ${avgTemp}¬∞C | Max: ${maxTemp}¬∞C | Min: ${minTemp}¬∞C</strong></p>
    <div class="weather-container">
      ${hoursForDay.map(h => renderHour(h, dateStr === currentDateStr, currentHour)).join("")}
    </div>
  `;
}

// √ìR√ÅNK√âNTI ID≈êJ√ÅR√ÅS K√ÅRTYA MEGJELEN√çT√âSE
function renderHour(hour, isToday, currentHour) {
  const dt = new Date(hour.dt * 1000);
  const hh = dt.getHours().toString().padStart(2, "0");
  const temp = Math.round(hour.temp);
  const originalDesc = hour.weather[0].description.toLowerCase();
  const desc = customDescriptions[originalDesc] || hour.weather[0].description;
  const icon = hour.weather[0].icon;
  const iconUrl = `https://openweathermap.org/img/wn/${icon}@2x.png`;

  const isCurrentHour = isToday && dt.getHours() === currentHour;

  return `
    <div class="weather-card${isCurrentHour ? " current-hour" : ""}">
      <strong>${hh}:00</strong><br />
      <img src="${iconUrl}" alt="${desc}" title="${desc}" style="width:48px; height:48px;" /><br />
      üå°Ô∏è ${temp}¬∞C<br />
      ‚òÅÔ∏è ${desc}
    </div>
  `;
}

// SZOTTYAD√ÅS LE√çR√ÅSOK
const customDescriptions = {
  "tiszta √©gbolt": "Nincs z√∂tyi az √©gen",
  "enyh√©n felh≈ës": "P√°r z√∂tyike lebeg az √©gen",
  "kev√©s felh≈ë": "P√°r z√∂tyi pihenget az √©gen",
  "r√©szben felh≈ës": "Z√∂tyi csak r√©szid≈ëben van jelen",
  "t√∂bbnyire felh≈ës": "Z√∂tyik m√°r uralj√°k az eget",
  "felh≈ës √©gbolt": "Z√∂tyi minden√ºtt",
  "er≈ësen felh≈ës": "Durva z√∂tyitakar√°s",
  "borult √©gbolt": "Teljes z√∂tyitakar√°s, no napf√©ny",
  "k√∂d": "Z√∂tyi a f√∂ld szintj√©n, semmit se l√°tsz",
  "f√ºst": "Z√∂tyiszag√∫ a leveg≈ë",
  "hamu": "Z√∂tyihamu hullik le",
  "szmog": "Ragacsos z√∂tyileveg≈ë",
  "por": "Sz√°ll a z√∂tyipor mindenfel√©",
  "homok": "Z√∂tyi homokkal sp√©kelve",
  "homokvihar": "Z√∂tyi tombol√≥ porral",
  "sz√°raz k√∂d": "P√°r√°s z√∂tyike burkol be",
  "z√°por": "Roncik potyognak b≈ëszen",
  "es≈ë": "RONCII ESIIIK, nedves roncis id≈ë",
  "enyhe es≈ë": "Csak csepeg, de z√∂tyis",
  "m√©rs√©kelt es≈ë": "Norm√°lisan roncizik",
  "heves es≈ë": "Z√∫dul a z√∂tyifelh≈ëb≈ël",
  "z√°porok": "Z√∂tyif√ºrd≈ë szakaszosan",
  "heves z√°por": "Rohad√≥ z√∂tyiz√°por",
  "intenz√≠v z√°por": "Nagyon z√∂tyis",
  "szit√°l√≥ es≈ë": "Finom ronciszit√°l√°s",
  "j√©ges≈ë": "Ronci j√©g m√≥dba kapcsolt",
  "havaz√°s": "Ronci potyog pelyhekben",
  "enyhe havaz√°s": "Csak picit z√∂tyizik",
  "heves havaz√°s": "Tot√°lis z√∂tyih√≥csap√°s",
  "havas es≈ë": "Vegyes z√∂tyi: v√≠z + h√≥",
  "h√≥z√°por": "Z√∂tyih√≥ sprintel lefel√©",
  "j√©g": "K≈ëkem√©ny z√∂tyifagy",
  "havases≈ë": "Z√∂tyis zagyvas√°g hullik",
  "zivatar": "Z√∂tyi tombol, dorc√°jka d√∂r√∂g",
  "enyhe zivatar": "Z√∂tyike csak pr√≥b√°lkozik",
  "er≈ës zivatar": "Tot√°l dorc√°z√≥s z√∂tyi",
  "vill√°ml√°s es≈ëvel": "Dorc√°jka + ronci komb√≥",
  "vill√°ml√°s es≈ë n√©lk√ºl": "Sz√°raz dorc√°jka-villan√°s",
  "sz√©ll√∂k√©s": "Z√∂tyisz√©l borzolja a hajad",
  "viharos sz√©l": "Z√∂tyihurrik√°n jelleg",
  "torn√°d√≥": "Tot√°l z√∂tyipuszt√≠t√≥ m√≥d",
  "p√°r√°s id≈ë": "Z√∂tyi lebeg a semmiben",
  "k√∂d√∂s id≈ë": "Z√∂tyihom√°ly mindenhol",
  "der√ºlt id≈ë": "Z√∂tyimentes √∂r√∂mnap",
};

// SZOTTYAD√ÅS M√âRCE KISZ√ÅMOL√ÅSA H≈êM√âRS√âKLET ALAPJ√ÅN
function szamitsSzottyadasSzint(homerseklet) {
  if (homerseklet <= -5) return 1;
  if (homerseklet <= 0) return 2;
  if (homerseklet <= 5) return 3;
  if (homerseklet <= 10) return 4;
  if (homerseklet <= 18) return 5;
  if (homerseklet <= 24) return 6;
  if (homerseklet <= 29) return 7;
  if (homerseklet <= 32) return 8;
  if (homerseklet <= 35) return 9;
  return 10;
}

// SZOTTYAD√ÅS M√âRCE FRISS√çT√âSE A KIJELZ≈êN
function frissitsSzottyadasMerce(homerseklet) {
  const szint = szamitsSzottyadasSzint(homerseklet);
  szottyadasSzintEl.textContent = szint;

  const szintElemek = document.querySelectorAll(".szint");
  szintElemek.forEach((elem, index) => {
    if (index < szint) {
      elem.classList.add("active");
    } else {
      elem.classList.remove("active");
    }
  });
}

// Ezzel a k√≥ddal indul az eg√©sz, ak√°r a g√©p helyzet√©vel, ak√°r v√°roskeres√©ssel.
