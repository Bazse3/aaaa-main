const openWeatherApiKey = "ed03c60b237355c3fb689a8a4a2706ee";

const weatherDiv = document.getElementById("weather");
const cityInput = document.getElementById("cityInput");
const searchBtn = document.getElementById("searchBtn");
const locationNameEl = document.getElementById("locationName");
const dateSelector = document.getElementById("dateSelector");

let weatherDataGlobal = null; // t√°rolja a lek√©rt adatokat
let selectedDate = null; // kiv√°lasztott d√°tum string (YYYY-MM-DD)

searchBtn.addEventListener("click", () => {
  const city = cityInput.value.trim();
  if (city) {
    getWeatherByCity(city);
  }
});

cityInput.addEventListener("keydown", (e) => {
  if (e.key === "Enter") {
    const city = cityInput.value.trim();
    if (city) {
      getWeatherByCity(city);
    }
  }
});

// AUTOMATIKUS HELYMEGHAT√ÅROZ√ÅS
window.onload = () => {
  if ("geolocation" in navigator) {
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        const { latitude, longitude } = pos.coords;
        console.log("Poz√≠ci√≥ megkapva:", latitude, longitude);
        getWeatherByCoords(latitude, longitude);
      },
      (error) => {
        console.error("Helymeghat√°roz√°si hiba:", error);
        locationNameEl.textContent = "V√°ros: -- (helyadat nem el√©rhet≈ë)";
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 0,
      }
    );
  } else {
    locationNameEl.textContent = "A b√∂ng√©sz≈ë nem t√°mogatja a helymeghat√°roz√°st.";
  }
};


async function getWeatherByCity(city) {
  weatherDiv.innerHTML = "‚è≥ Bet√∂lt√©s...";
  locationNameEl.textContent = "V√°ros: ...";
  dateSelector.innerHTML = "";

  try {
    const geoRes = await fetch(
      `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(
        city
      )}&limit=1&appid=${openWeatherApiKey}`
    );
    const geoData = await geoRes.json();

    if (!geoData.length) {
      weatherDiv.innerHTML = "‚ùå Nem tal√°lhat√≥ a v√°ros!";
      locationNameEl.textContent = "V√°ros: --";
      return;
    }

    const { lat, lon, name } = geoData[0];
    cityInput.value = name;

    getWeatherByCoords(lat, lon, name);
  } catch (error) {
    console.error(error);
    weatherDiv.innerHTML = "‚ùå Hiba t√∂rt√©nt az adatok lek√©r√©sekor.";
    locationNameEl.textContent = "V√°ros: --";
  }
}

async function getWeatherByCoords(lat, lon, cityName) {
  weatherDiv.innerHTML = "‚è≥ Bet√∂lt√©s...";
  locationNameEl.textContent = cityName
    ? `V√°ros: ${cityName}`
    : `V√°ros: ${lat.toFixed(2)}, ${lon.toFixed(2)}`;
  dateSelector.innerHTML = "";

  try {
    const weatherRes = await fetch(
      `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&exclude=minutely,daily,alerts&units=metric&lang=hu&appid=${openWeatherApiKey}`
    );
    const weatherData = await weatherRes.json();

    weatherDataGlobal = weatherData;

    // d√°tumok legy√°rt√°sa (7 napra el≈ëre)
    createDateButtons();

    // alap√©rtelmezett kiv√°lasztott nap: mai nap
    const todayStr = new Date().toISOString().split("T")[0];
    selectDate(todayStr);
  } catch (error) {
    console.error(error);
    weatherDiv.innerHTML = "‚ùå Hiba t√∂rt√©nt az id≈ëj√°r√°s lek√©r√©sekor.";
  }
}

function createDateButtons() {
  dateSelector.innerHTML = "";
  const today = new Date();

  for (let i = 0; i < 3; i++) {
    const date = new Date(today.getTime() + i * 86400000);
    const isoStr = date.toISOString().split("T")[0];
    const displayStr =
      ("0" + (date.getMonth() + 1)).slice(-2) + "." + ("0" + date.getDate()).slice(-2);

    const btn = document.createElement("button");
    btn.classList.add("date-button");
    btn.textContent = displayStr;
    btn.dataset.date = isoStr;

    btn.addEventListener("click", () => {
      selectDate(isoStr);
    });

    dateSelector.appendChild(btn);
  }
}

function renderWeatherForDate(dateStr) {
  if (!weatherDataGlobal) return;

  const hoursForDay = weatherDataGlobal.hourly.filter((hour) => {
    const dt = new Date(hour.dt * 1000);
    return dt.toISOString().startsWith(dateStr);
  });

  if (hoursForDay.length === 0) {
    weatherDiv.innerHTML = `<p>Nem el√©rhet≈ë adat erre a napra.</p>`;
    return;
  }

  // √Åtlag, max, min h≈ëm√©rs√©klet sz√°m√≠t√°sa
  const temps = hoursForDay.map(h => h.temp);
  const avgTemp = (temps.reduce((a,b) => a + b, 0) / temps.length).toFixed(1);
  const maxTemp = Math.max(...temps).toFixed(1);
  const minTemp = Math.min(...temps).toFixed(1);

  const now = new Date();
  const currentHour = now.getHours();
  const currentDateStr = now.toISOString().split("T")[0];

  weatherDiv.innerHTML = `
    <div class="day-section">
      <h2>${dateStr === currentDateStr ? "Mai nap" : dateStr}</h2>
      <p><strong>√Åtlag: ${avgTemp}¬∞C | Max: ${maxTemp}¬∞C | Min: ${minTemp}¬∞C</strong></p>
      <div class="weather-container">
        ${hoursForDay
          .map(hour => renderHour(hour, dateStr === currentDateStr, currentHour))
          .join("")}
      </div>
    </div>
  `;
}


function renderHour(hour, isToday, currentHour) {
  const dt = new Date(hour.dt * 1000);
  const hh = dt.getHours().toString().padStart(2, "0");
  const temp = Math.round(hour.temp);
  const desc = hour.weather[0].description;
  const icon = hour.weather[0].icon;
  const iconUrl = `https://openweathermap.org/img/wn/${icon}@2x.png`;

  const isCurrentHour = isToday && dt.getHours() === currentHour;

  return `
    <div class="weather-card${isCurrentHour ? " current-hour" : ""}">
      <strong>${hh}:00</strong><br>
      <img src="${iconUrl}" alt="${desc}" title="${desc}" style="width:48px; height:48px;" /><br>
      üå°Ô∏è ${temp}¬∞C<br>
      ‚òÅÔ∏è ${desc}
    </div>
  `;
}

function renderEmptyHour() {
  return `
    <div class="weather-card" style="opacity:0.3; color:#888;">
      <strong>--:--</strong>
      <br>‚Äì<br>‚Äì
    </div>
  `;
}

function selectDate(dateStr) {
  selectedDate = dateStr;

  // Aktiv√°ljuk a kiv√°lasztott gombot, kikapcsoljuk a t√∂bbit
  Array.from(dateSelector.children).forEach(btn => {
    btn.classList.toggle("active", btn.dataset.date === dateStr);
  });

  renderWeatherForDate(dateStr);
}

let watchId = null;

function startWatching() {
  if ("geolocation" in navigator) {
    watchId = navigator.geolocation.watchPosition(
      (pos) => {
        const { latitude, longitude } = pos.coords;
        getWeatherByCoords(latitude, longitude);
      },
      (error) => {
        console.error("Helymeghat√°roz√°si hiba:", error);
        locationNameEl.textContent = "V√°ros: -- (helyadat nem el√©rhet≈ë)";
      },
      {
        enableHighAccuracy: true,
        maximumAge: 0,
        timeout: 10000,
      }
    );
  }
}

function stopWatching() {
  if (watchId !== null) {
    navigator.geolocation.clearWatch(watchId);
  }
}

// ind√≠tsd el pl window.onload-ban vagy mikor kell
startWatching();



const customDescriptions = {
  'tiszta √©gbolt': 'Tiszta a z√∂tyi √©g, ronc√°jt√≥l nemkell f√©ni',
  'kev√©s felh≈ë': 'Kev√©s ronci van az √©gen, eg√©sz fasza',
  'sz√≥rv√°nyos felh≈ëzet': 'Ronc√°j √©szlelve, az√©rt basz√≥',
  'megszak√≠t√°sokkal felh≈ës': 'Roncik random felbukkannak az √©gen',
  'felh≈ëzet': 'Ronci √©szlelve, de nem csepereg',
  'er≈ësen felh≈ës': 'Telibe ronci, dorcim√©ter maxon',
  'bor√∫s √©gbolt': 'Bor√∫s a dorc√°jka',
  
  'z√°pores≈ë': 'RONCIII!!! VIGY√ÅZZZ!!, es≈ë lesz z√∂tyi haza',
  'szakaszos es≈ë': 'Egyszer van, egyszer nincs ‚Äî tipikus dorcies≈ë',
  'es≈ë': 'RONCII ESIIIK, nedves roncis id≈ë',
  'enyhe es√∂': 'Esik a dorciii de csak picik√©√©√©tt',
  'k√∂zepes es≈ë': 'Norm√°l mennyis√©g≈± roncipatak',
  'heves es≈ë': 'RONCIZUHATAG, dorcit elmoshatja',
  'hosszan tart√≥ es≈ë': 'Dorci szomork√°s hossz√∫ roncipatakban',
  'szakad√≥ es≈ë': 'Z√∫dul a ronci, tet≈ë al√°aa',
  'j√©ges≈ë': 'J√âGRONCIK hullanak! Sisakot vegy√©!',
  'fagyott es≈ë': 'Fagyott dorci koppan az ablakon',
  
  'zivatar': 'DORCI CSATTOG, vill√°ml√°s',
  'enyhe zivatar': 'Pici dorcimorg√°s, de nem v√©szes',
  'heves zivatar': 'DORCIMAX vihar, z√∂tyi bunkerbe!',
  'zivatar es≈ëvel': 'Vill√°mcsap√°s √©s roncipatak, egy√ºtt a buli',
  'zivatar h√≥val': 'Vill√°mlik, de h√≥ is j√∂n ‚Äî dorcifura!',
  
  'h√≥': 'Esik a h√≥, ronci boldog',
  'enyhe havaz√°s': 'Pihe-puha h√≥ ronci m√≥dra',
  'havaz√°s': 'Sz√°ll a h√≥, dorci √∂r√ºl',
  'er≈ës havaz√°s': 'Roncilavina j√∂n, h√≥goly√≥zz!',
  'h√≥z√°por': 'Hirtelen h√≥robban√°s dorci felett',
  'havas es≈ë': 'Dorci nem tudja, most esik vagy havazik',
  'j√©gt≈±': 'J√©gcsapok szurk√°lnak, roncikeszty≈±t fel!',
  'fagyott szit√°l√°s': 'Dorci jegesen k√∂h√©cselget',

  'k√∂d': 'K√∂d√∂s, dorci befingott',
  'hom√°lyos': 'Valami roncik√∂df√©le, nem tiszta',
  'f√ºst': 'Valaki √©geti a dorcit a z√∂tyi alatt',
  'szmog': 'RONCIF√úST minden√ºtt, ne sz√≠vj√°l bele',
  'hamu': 'RONCIH√ÅBOR√ö? Hamu hullik az √©gb≈ël',
  'por': 'Minden poros, dorci m√°r pr√ºszk√∂l',
  'sz√©lf√∫tta homok': 'Roncisz√©l tolja a homokot, z√∂ty√∂gj √≥vatosan',

  'sz√©ll√∂k√©s': 'Dorci majdnem elrep√ºl a sz√©llel',
  'torn√°d√≥': 'DORCIN√ÅD√ì! Csavarg√≥ sz√©l',
  'tr√≥pusi vihar': 'Forr√≥ sz√©l √©s v√≠z dorcim√≥dra',
  't√∂lcs√©rfelh≈ë': 'F√©l dorcit beszippantotta egy t√∂lcs√©r'
};